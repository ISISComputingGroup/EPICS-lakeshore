
# Template to provide the records required for an input. 
# This makes use of the macros required by lakeshore336.template
# but also requires macros to specify the input channel and index.
# The index is to provide a way for the developer to use a different
# channel naming scheme.
#
# For some commands, I hard coded the last part of the record names into 
# the protocol file. This seems the easiest way to deal with commands
# will lots of params returned back, and avoid problematic long INP fields. 
# For the ZONE commands I used waveforms and subarrays, but that is not as simple.
#
# Macros:
# INPUT - A to D
# INDEX - Index to use for the input channel PV name and DESC (eg. 0 to 3)
# DISABLE - PV name to use for SDIS

##
## Alarm summary record for input
## This summarizes the software limits on the temperature readings,
## the alarm status reading from the controller and the input reading status.
##
record(calc, "$(P):ALARM$(INDEX)_SUMMARY_CALC") {
  field(INPA, "$(P):TEMP$(INDEX) CP MS")
  field(INPB, "$(P):ALARM$(INDEX):HIGH CP MS")
  field(INPC, "$(P):ALARM$(INDEX):LOW CP MS")
  field(INPD, "$(P):READING$(INDEX):INVALID CP MS")
  field(INPE, "$(P):READING$(INDEX):TEMP_UNDER CP MS")
  field(INPF, "$(P):READING$(INDEX):TEMP_OVER CP MS")
  field(INPG, "$(P):READING$(INDEX):SENS_ZERO CP MS")
  field(INPH, "$(P):READING$(INDEX):SENS_OVER CP MS")
  field(CALC, "A")
  field(FLNK, "$(P):ALARM$(INDEX)_SUMMARY_CALC2")
  field(SDIS, "$(DISABLE)")  
}

record(calcout, "$(P):ALARM$(INDEX)_SUMMARY_CALC2") {
  field(INPA, "$(P):ALARM$(INDEX)_SUMMARY_CALC.STAT")
  field(CALC, "A!=0?1:0")
  field(DOPT, "Use CALC")
  field(OOPT, "Every Time")
  field(OUT, "$(P):ALARM$(INDEX)_SUMMARY PP")
}

record(bi, "$(P):ALARM$(INDEX)_SUMMARY") {
  field(ZNAM, "No Alarm")
  field(ONAM, "Alarm")
  field(OSV, "MAJOR")
  field(PINI, "YES")
  field(VAL, "0")  
}

##
## If we disable polling this input, disable the alarm
##
record(calcout, "$(P):ALARM$(INDEX)_SUMMARY_DISABLE") {
  field(INPA, "$(DISABLE) CP")
  field(CALC, "A==1?0:1")
  field(DOPT, "Use CALC")
  field(OOPT, "When Zero")
  field(OUT, "$(P):ALARM$(INDEX)_SUMMARY.VAL PP")
}
	

## 
## Read the temperature on channel $(INDEX) in Kelvin.
## In vendor code this was:
##  record(ai, "$(P):KRDG$(INDEX)")
record(ai, "$(P):TEMP$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(DESC, "Channel $(INDEX) Temperature")
  field(INP, "@ls336.proto getKRDG($(INPUT)) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
  field(PREC, "3")
  field(EGU, "K")
  field(HHSV,"MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV,"MAJOR")
  field(HYST,"1.0")
  field(HIHI,"1000")
  field(HIGH,"1000")
  field(LOW,"-1")
  field(LOLO,"-1")  
}

## 
## Read the raw voltage on channel $(INDEX).
## In vendor code this was:
## record(ai, "$(P):SRDG$(INDEX)")
record(ai, "$(P):RAW_VOLT$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getSRDG($(INPUT)) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
  field(PREC, "3")
  field(EGU, "V")
  field(ADEL, "$(ADEL=1)")
  field(MDEL, "$(MDEL=0)")
}

##
## Set sensor $(INDEX) name 
## In vendor code this was:
## record(stringout, "$(P):INNAME_S$(INDEX)")
record(stringout, "$(P):NAME$(INDEX):SP") {
  field(DESC, "Set Input $(INDEX) Name")
  field(DTYP, "stream")
  field(SDIS, "$(P):DISABLE")
  field(OUT, "@ls336.proto setINNAME($(INPUT)) $(PORT) $(ADDR)")
  field(FLNK, "$(P):NAME$(INDEX).PROC CA")
}

## 
## Read input sensor $(INDEX) name
## In vendor code this was:
## record(stringin, "$(P):INNAME$(INDEX)")
record(stringin, "$(P):NAME$(INDEX)") {
  field(DESC, "Read Input $(INDEX) Name")
  field(DTYP, "stream")
  field(SDIS, "$(P):DISABLE")
  field(INP, "@ls336.proto getINNAME($(INPUT)) $(PORT) $(ADDR)")
  field(PINI, "YES")
  field(SCAN, "Passive")
}
alias("$(P):NAME$(INDEX)", "$(P):NAME$(INDEX):SP:RBV")

##
## Read the high alarm status for input $(INDEX).
## This also populates ALARM$(INDEX):LOW
## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)_HIGH")
record(bi, "$(P):ALARM$(INDEX):HIGH") {
  field(DESC, "High Alarm Status")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getALARMST($(INPUT),$(P):ALARM$(INDEX):LOW) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(OSV, "MAJOR")
}

##
## Read the low alarm status for input $(INDEX)
## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)_LOW")
record(bi, "$(P):ALARM$(INDEX):LOW") {
  field(DESC, "Low Alarm Status")
  field(DTYP, "Soft Channel")	   
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(OSV, "MAJOR")
}

##
## Read the alarm parameters.
## NOTE: reads values into the inputs of a CALC record 
## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)")
record(bi, "$(P):ALARM$(INDEX):SP:RBV_DO") {
  field(DESC, "Read Alarm Params")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getALARM($(INPUT),$(P):ALARM$(INDEX):SP:RBV_BUFF) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

record(calc, "$(P):ALARM$(INDEX):SP:RBV_BUFF") {
  field(CALC, "0")
}

##
## Read the rest of the alarm params.
## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)_ONOFF")
record(bi, "$(P):ALARM$(INDEX):ON") {
  field(DESC, "Alarm Enabled")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.A CP")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

## In vendor code this was:
## record(ai, "$(P):ALARM$(INDEX)_HIGHVAL")
record(ai, "$(P):ALARM$(INDEX):HIVAL") {
  field(DESC, "Alarm High Value")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.B CP")
  field(EGU, "K")
}

## In vendor code this was:
## record(ai, "$(P):ALARM$(INDEX)_LOWVAL")
record(ai, "$(P):ALARM$(INDEX):LOVAL") {
  field(DESC, "Alarm Low Value")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.C CP")
  field(EGU, "K")
}

## In vendor code this was:
## record(ai, "$(P):ALARM$(INDEX)_DB")
record(ai, "$(P):ALARM$(INDEX):DEADBAND") {
  field(DESC, "Alarm Deadband")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.D CP")
  field(EGU, "K")
}

## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)_LE")
record(bi, "$(P):ALARM$(INDEX):LATCHED") {
  field(DESC, "Alarm Latch Enable")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.E CP")
  field(ZNAM, "Non Latching")
  field(ONAM, "Latching")
}

## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)_AU")
record(bi, "$(P):ALARM$(INDEX):AUDIBLE") {
  field(DESC, "Alarm Audible")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.F CP")
  field(ZNAM, "Quiet")
  field(ONAM, "Audible")
}

## In vendor code this was:
## record(bi, "$(P):ALARM$(INDEX)_VIS")
record(bi, "$(P):ALARM$(INDEX):VISIBLE") {
  field(DESC, "Alarm Visible")
  field(INP, "$(P):ALARM$(INDEX):SP:RBV_BUFF.G CP")
  field(ZNAM, "Non Visible")
  field(ONAM, "Visible")
}


##
## Read the input reading status
## This replaces the following from vendor code:
## record(mbbi, "$(P):RDGST$(INDEX)")
record(mbbiDirect, "$(P):READING$(INDEX):STAT") {
  field(DESC, "Input Reading Status")
  field(SDIS, "$(DISABLE)")
  field(SCAN, "$(SCAN) second")  
  field(DTYP, "stream")
  field(INP, "@ls336.proto getRDGST($(INPUT)) $(PORT) $(ADDR)")
}

record(bi, "$(P):READING$(INDEX):INVALID") {
  field(DESC, "Input Reading Invalid")
  field(INP, "$(P):READING$(INDEX):STAT.B0 CP")
  field(ZNAM, "Valid")
  field(ONAM, "Invalid")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
}

record(bi, "$(P):READING$(INDEX):TEMP_UNDER") {
  field(DESC, "Input Temperature Underrange")
  field(INP, "$(P):READING$(INDEX):STAT.B4 CP")
  field(ZNAM, "Valid")
  field(ONAM, "Temp Underrange")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
}

record(bi, "$(P):READING$(INDEX):TEMP_OVER") {
  field(DESC, "Input Temperature Overrange")
  field(INP, "$(P):READING$(INDEX):STAT.B5 CP")
  field(ZNAM, "Valid")
  field(ONAM, "Temp Overrange")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
}

record(bi, "$(P):READING$(INDEX):SENS_ZERO") {
  field(DESC, "Input Sensor Units Zero")
  field(INP, "$(P):READING$(INDEX):STAT.B6 CP")
  field(ZNAM, "Valid")
  field(ONAM, "Sensor Units Zero")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
}

record(bi, "$(P):READING$(INDEX):SENS_OVER") {
  field(DESC, "Input Sensor Units Overrange")
  field(INP, "$(P):READING$(INDEX):STAT.B7 CP")
  field(ZNAM, "Valid")
  field(ONAM, "Sensor Units Overrange")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
}


##
## Read the input curve number
## In vendor code this was:
## record(longin, "$(P):INCRV$(INDEX)")
record(longin, "$(P):CURVE$(INDEX):NUM") {
  field(DESC, "Input Curve Number")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(SCAN, "$(SCAN) second")  
  field(INP, "@ls336.proto getINCRV($(INPUT)) $(PORT) $(ADDR)")
  field(FLNK, "$(P):CURVE$(INDEX):HEAD_DO")
}

##
## Read the input curve header.
## NOTE: reads values into the inputs of a scalcout record 
##
record(bi, "$(P):CURVE$(INDEX):HEAD_DO") {
  field(DESC, "Read Input Curve Header Params")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
#  field(INP, "@ls336.proto getCRVHDR($(P):CURVE$(INDEX),NUM,NAME,SERIAL_N,FORMAT,LIM,COEFF) $(PORT) $(ADDR)")
  field(INP, "@ls336.proto getCRVHDR($(P):CURVE$(INDEX),NUM,HEAD_BUFF) $(PORT) $(ADDR)")
}

record(scalcout, "$(P):CURVE$(INDEX):HEAD_BUFF") {
	field(CALC, "0")
}

##
## Read the rest of the input curve header.
##
record(stringin, "$(P):CURVE$(INDEX):NAME") {
  field(DESC, "Curve Name")
  field(INP, "$(P):CURVE$(INDEX):HEAD_BUFF.AA CP")
}

record(stringin, "$(P):CURVE$(INDEX):SERIAL_N") {
  field(DESC, "Curve Serial Number")
  field(INP, "$(P):CURVE$(INDEX):HEAD_BUFF.BB CP")
}

record(mbbi, "$(P):CURVE$(INDEX):FORMAT") {
  field(DESC, "Curve Data Format")
  field(INP, "$(P):CURVE$(INDEX):HEAD_BUFF.A CP")
  field(ZRVL, "0")
  field(ZRST, "Unknown")
  field(ONVL, "1")
  field(ONST, "mV/K")
  field(TWVL, "2")
  field(TWST, "V/K")
  field(THVL, "3")
  field(THST, "Ohm/K")
  field(FRVL, "4")
  field(FRST, "log Ohm/K")
}

record(ai, "$(P):CURVE$(INDEX):LIM") {
  field(DESC, "Curve Temperature Limit")
  field(INP, "$(P):CURVE$(INDEX):HEAD_BUFF.B CP")
  field(EGU, "K")
  field(PREC, "3")
}

record(mbbi, "$(P):CURVE$(INDEX):COEFF") {
  field(DESC, "Curve Temperature Coefficient")
  field(INP, "$(P):CURVE$(INDEX):HEAD_BUFF.C CP")
  field(ZRVL, "0")
  field(ZRST, "Unknown")
  field(ONVL, "1")
  field(ONST, "Negative")
  field(TWVL, "2")
  field(TWST, "Positive")
}


## 
## Read the input type information.
## NOTE: reads values into the inputs of a calc record 
##
record(bi, "$(P):IN$(INDEX):TYPE_DO") {
  field(DESC, "Read Input Type Params")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getINTYPE($(INPUT),$(P):IN$(INDEX):TYPE_BUFF) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

record(calc, "$(P):IN$(INDEX):TYPE_BUFF") {
  field(CALC, "0")
}

##
## Read the rest of the input type params.
## NOTE: the last part of the record names are hard coded into protocol file. 
##
record(mbbi, "$(P):IN$(INDEX):SENS_TYPE") {
  field(DESC, "Sensor Type")
  field(INP, "$(P):IN$(INDEX):TYPE_BUFF.A CP")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Diode")
  field(ONVL, "1")
  field(TWST, "Platinum RTD")
  field(TWVL, "2")
  field(THST, "NTC RTD")
  field(THVL, "3")
  field(FRST, "Thermocouple")
  field(FRVL, "4")
  field(FVST, "Capacitance")
  field(FVVL, "5")
}
record(bi, "$(P):IN$(INDEX):AUTORANGE") {
  field(DESC, "Auto Range")
  field(INP, "$(P):IN$(INDEX):TYPE_BUFF.B CP")
  field(ZNAM, "Off")
  field(ONAM, "On")
}
record(mbbi, "$(P):IN$(INDEX):RANGE") {
  field(DESC, "Range")
  field(INP, "$(P):IN$(INDEX):TYPE_BUFF.C CP")
  field(ZRST, "10 Ohm / 2.5V / 50mV")
  field(ZRVL, "0")
  field(ONST, "30 Ohm / 10V")
  field(ONVL, "1")
  field(TWST, "100 Ohm")
  field(TWVL, "2")
  field(THST, "300 Ohm")
  field(THVL, "3")
  field(FRST, "1 KOhm")
  field(FRVL, "4")
  field(FVST, "3 KOhm")
  field(FVVL, "5")
  field(SXST, "10 KOhm")
  field(SXVL, "6")
  field(SVST, "30 KOhm")
  field(SVVL, "7")
  field(EIST, "100 KOhm")
  field(EIVL, "8")
}
record(bi, "$(P):IN$(INDEX):COMPENSATION") {
  field(DESC, "Compensation")
  field(INP, "$(P):IN$(INDEX):TYPE_BUFF.D CP")
  field(ZNAM, "Off")
  field(ONAM, "On")
}
record(mbbi, "$(P):IN$(INDEX):UNITS") {
  field(DESC, "Units")
  field(INP, "$(P):IN$(INDEX):TYPE_BUFF.E CP")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Kelvin")
  field(ONVL, "1")
  field(TWST, "Celcius")
  field(TWVL, "2")
  field(THST, "Sensor")
  field(THVL, "3")
}


