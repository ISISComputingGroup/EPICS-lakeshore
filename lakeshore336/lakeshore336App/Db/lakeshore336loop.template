# This is included in lakeshore336.template
# This template is for outputs 1 and 2, which can provide heater power.

################################################################
# Read records
################################################################

## 
## Read the heater output value.
## In vendor code this was:
## record(ai, "$(P):HTR$(OUT)")
##
record(ai, "$(P):HEATER$(OUT):OUTPUT") {
  field(DESC, "Heater Output Percentage")
  field(DTYP, "stream")
  field(SDIS, "$(P):DISABLE_POLL")
  field(INP, "@ls336.proto getHTR($(OUT)) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(PREC, "1")
  field(EGU, "%")
}

## 
## Define the strings and values for this record.
## In vendor code this was:
## record(mbbi, "$(P):RANGE$(OUT)")
##
record(mbbi, "$(P):HEATER$(OUT):RANGE") {
  field(ZRST, "Off")
  field(ONST, "Range1/Low")
  field(TWST, "Range2/Medium")
  field(THST, "Range3/High")
  field(FRST, "Range4")	
  field(FVST, "Range5")
}

##
## Define the strings and values for this record.
## In vendor code this was:
## record(mbbi, "$(P):OMM$(OUT)")
##
record(mbbi, "$(P):OUTPUT_MODE$(OUT)") {
  field(ZRST, "Off")
  field(ONST, "Closed Loop PID")
  field(TWST, "Zone")
  field(THST, "Open Loop")
  
  field(FRST, "Monitor Out")
  field(FVST, "Warm Up Supply")
}

## 
## Define the strings and values for this record.
## In vendor code this was:
## record(mbbo, "$(P):RANGE_S$(OUT)")
## 
record(mbbo, "$(P):HEATER$(OUT):RANGE:SP") {
  field(ZRST, "Off")
  field(ONST, "Range1/Low")
  field(TWST, "Range2/Medium")
  field(THST, "Range3/High")
  field(FRST, "Range4")	
  field(FVST, "Range5")
}

##
## Define the strings and values for this record.
## In vendor code this was:
## record(mbbo, "$(P):OMM_S$(OUT)")
##
record(mbbo, "$(P):OUTPUT_MODE$(OUT):SP") {
  field(ZRST, "Off")
  field(ONST, "Closed Loop PID")
  field(TWST, "Zone")
  field(THST, "Open Loop")
}

##
## Read the heater status
## In vendor code this was:
## record(longin, "$(P):HTRST$(OUT)")
##
record(longin, "$(P):HEATER$(OUT):RAW_STAT") {
  field(DESC, "Raw Heater Status")
  field(DTYP, "stream")
  field(SDIS, "$(P):DISABLE_POLL")
  field(SCAN, "$(SCAN) second")  
  field(INP, "@ls336.proto getHTRST($(INPUT)) $(PORT) $(ADDR)")
  field(FLNK, "$(P):HEATER$(OUT):STAT_CALC")
}

##
## Cache the heater status because this is cleared on a read on the controller.
## In vendor code this was:
## record(calcout, "$(P):HTRST$(OUT)_CALC")
##
record(calcout, "$(P):HEATER$(OUT):STAT_CALC") {
  field(INPA, "$(P):HEATER$(OUT):RAW_STAT")
  field(CALC, "A!=0?A:0")
  field(DOPT, "Use CALC")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P):HEATER$(OUT):STAT.RVAL PP")
}

##
## Caches the heater status
## In vendor code this was:
## record(mbbi, "$(P):HTRST$(OUT)_CACHE")
##
record(mbbi, "$(P):HEATER$(OUT):STAT") {
  field(DESC, "Cached Heater Status")
  field(DTYP, "Raw Soft Channel")
  field(ZRST, "No Error")
  field(ZRVL, "0")
  field(ONST, "Open Load")
  field(ONVL, "1")
  field(TWST, "Short/Compliance")
  field(TWVL, "2")
  field(VAL, "0")
  field(PINI, "YES")
  field(ONSV, "MAJOR")
  field(TWSV, "MAJOR")
}

##
## Provide record to reset the cached value
## In vendor code this was:
## record(bo, "$(P):HTRST$(OUT)_RESET")
##
record(bo, "$(P):HEATER$(OUT):STAT_RESET") {
  field(DESC, "Reset Cached Heater Status")
  field(VAL, "0")
  field(OUT, "$(P):HEATER$(OUT):STAT.RVAL PP")
}

